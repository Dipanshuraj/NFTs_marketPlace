{"ast":null,"code":"import _classCallCheck from \"/Users/dipanshuraj/Documents/NFT Market/nft-marketplace-starter-kit-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dipanshuraj/Documents/NFT Market/nft-marketplace-starter-kit-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dipanshuraj/Documents/NFT Market/nft-marketplace-starter-kit-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dipanshuraj/Documents/NFT Market/nft-marketplace-starter-kit-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dipanshuraj/Documents/NFT Market/nft-marketplace-starter-kit-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dipanshuraj/Documents/NFT Market/nft-marketplace-starter-kit-main/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json'; // import {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\n// import './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, \" NFT Market Place\"));\n    } // async componentDidMount() {\n    //     await this.loadWeb3();\n    //     await this.loadBlockchainData();\n    // }\n    // // first up is to detect ethereum provider\n    // async loadWeb3() {\n    //     const provider = await detectEthereumProvider();\n    //     // modern browsers\n    //     // if there is a provider then lets\n    //     // lets log that it's working and access the window from the doc\n    //     // to set Web3 to the provider \n    //     if(provider) {\n    //         console.log('ethereum wallet is connected')\n    //         window.web3 = new Web3(provider)\n    //     } else {\n    //         // no ethereum provider\n    //         console.log('no ethereum wallet detected')\n    //     }\n    // }\n    // async loadBlockchainData() {\n    //     const web3 = window.web3\n    //     const accounts = await web3.eth.getAccounts()\n    //     this.setState({account:accounts[0]})\n    //     // create a constant js variable networkId which \n    //     //is set to blockchain network id \n    //     const networkId = await web3.eth.net.getId()\n    //     const networkData = KryptoBird.networks[networkId]\n    //      if(networkData) {\n    //          // EXERCISE TIME!!!! :)\n    //          // 1. create a var abi set to the Kryptobird abi\n    //          // 2. create a var address set to networkData address\n    //          // 3. create a var contract which grabs a \n    //          //new instance of web3 eth Contract  \n    //          // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n    //          const abi = KryptoBird.abi;\n    //          const address = networkData.address; \n    //          const contract = new web3.eth.Contract(abi, address)\n    //          this.setState({contract})\n    //          // call the total supply of our Krypto Birdz \n    //          // grab the total supply on the front end and log the results\n    //          // go to web3 doc and read up on methods and call \n    //          const totalSupply = await contract.methods.totalSupply().call()\n    //         this.setState({totalSupply})\n    //         // set up an array to keep track of tokens \n    //         // load KryptoBirdz\n    //         for(let i = 1; i <= totalSupply; i++) {\n    //             const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\n    //             // how should we handle the state on the front end? \n    //             this.setState({\n    //                 kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n    //             })\n    //         }\n    //      } else {\n    //          window.alert('Smart contract not deployed')\n    //      }\n    // }\n    // // with minting we are sending information and we need to specify the account\n    // mint = (kryptoBird) => {\n    //     this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\n    //     .once('receipt', (receipt)=> {\n    //         this.setState({\n    //             kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n    //         })\n    //     })  \n    // }\n    // constructor(props) {\n    //      super(props);\n    //      this.state = {\n    //          account: '',\n    //          contract:null,\n    //          totalSupply:0,\n    //          kryptoBirdz:[]\n    //      }\n    // }\n    //         // BUILDING THE MINTING FORM\n    //         // 1. Create a text input with a place holder \n    //         //'add file location'\n    //         // 2. Create another input button with the type submit\n    // render() {\n    //     return (\n    //         <div className='container-filled'>\n    //             {console.log(this.state.kryptoBirdz)}\n    //             <nav className='navbar navbar-dark fixed-top \n    //             bg-dark flex-md-nowrap p-0 shadow'>\n    //             <div className='navbar-brand col-sm-3 col-md-3 \n    //             mr-0' style={{color:'white'}}>\n    //                   Krypto Birdz NFTs (Non Fungible Tokens)\n    //             </div>\n    //             <ul className='navbar-nav px-3'>\n    //             <li className='nav-item text-nowrap\n    //             d-none d-sm-none d-sm-block\n    //             '>\n    //             <small className='text-white'>\n    //                 {this.state.account}\n    //             </small>\n    //             </li>\n    //             </ul>\n    //             </nav>\n    //             <div className='container-fluid mt-1'>\n    //                 <div className='row'>\n    //                     <main role='main' \n    //                     className='col-lg-12 d-flex text-center'>\n    //                         <div className='content mr-auto ml-auto'\n    //                         style={{opacity:'0.8'}}>\n    //                             <h1 style={{color:'black'}}>\n    //                                 KryptoBirdz - NFT Marketplace</h1>\n    //                         <form onSubmit={(event)=>{\n    //                             event.preventDefault()\n    //                             const kryptoBird = this.kryptoBird.value\n    //                             this.mint(kryptoBird)\n    //                         }}>\n    //                             <input\n    //                             type='text'\n    //                             placeholder='Add a file location'\n    //                             className='form-control mb-1'\n    //                             ref={(input)=>this.kryptoBird = input}\n    //                             />\n    //                             <input style={{margin:'6px'}}\n    //                             type='submit'\n    //                             className='btn btn-primary btn-black'\n    //                             value='MINT'\n    //                             />\n    //                             </form>\n    //                         </div>\n    //                     </main>\n    //                 </div>\n    //                     <hr></hr>\n    //                     <div className='row textCenter'>\n    //                         {this.state.kryptoBirdz.map((kryptoBird, key)=>{\n    //                             return(\n    //                                 <div >\n    //                                     <div>\n    //                                         <MDBCard className='token img' style={{maxWidth:'22rem'}}>\n    //                                         <MDBCardImage src={kryptoBird}  position='top' height='250rem' style={{marginRight:'4px'}} />\n    //                                         <MDBCardBody>\n    //                                         <MDBCardTitle> KryptoBirdz </MDBCardTitle> \n    //                                         <MDBCardText> The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain. </MDBCardText>\n    //                                         <MDBBtn href={kryptoBird}>Download</MDBBtn>\n    //                                         </MDBCardBody>\n    //                                         </MDBCard>\n    //                                          </div>\n    //                                 </div>\n    //                             )\n    //                         })} \n    //                     </div>\n    //             </div>\n    //         </div>\n    //     )\n    // }\n\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/dipanshuraj/Documents/NFT Market/nft-marketplace-starter-kit-main/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CACA;AACA;;IAEMC,G;;;;;;;;;;;;;6BAEM;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,CADJ;AAMH,K,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;EA5KcJ,S;;AA+KlB,eAAeI,GAAf","sourcesContent":["import React,{ Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json'\n// import {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\n// import './App.css';\n\nclass App extends Component {\n\n    render(){\n        return(\n            <div>\n                <h1> NFT Market Place</h1>\n            </div>\n        )\n\n    }\n\n    // async componentDidMount() {\n    //     await this.loadWeb3();\n    //     await this.loadBlockchainData();\n    // }\n\n    // // first up is to detect ethereum provider\n    // async loadWeb3() {\n    //     const provider = await detectEthereumProvider();\n\n    //     // modern browsers\n    //     // if there is a provider then lets\n    //     // lets log that it's working and access the window from the doc\n    //     // to set Web3 to the provider \n        \n    //     if(provider) {\n    //         console.log('ethereum wallet is connected')\n    //         window.web3 = new Web3(provider)\n    //     } else {\n    //         // no ethereum provider\n    //         console.log('no ethereum wallet detected')\n    //     }\n    // }\n\n    // async loadBlockchainData() {\n    //     const web3 = window.web3\n    //     const accounts = await web3.eth.getAccounts()\n    //     this.setState({account:accounts[0]})\n\n    //     // create a constant js variable networkId which \n    //     //is set to blockchain network id \n    //     const networkId = await web3.eth.net.getId()\n    //     const networkData = KryptoBird.networks[networkId]\n    //      if(networkData) {\n    //          // EXERCISE TIME!!!! :)\n    //          // 1. create a var abi set to the Kryptobird abi\n    //          // 2. create a var address set to networkData address\n    //          // 3. create a var contract which grabs a \n    //          //new instance of web3 eth Contract  \n    //          // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n\n    //          const abi = KryptoBird.abi;\n    //          const address = networkData.address; \n    //          const contract = new web3.eth.Contract(abi, address)\n    //          this.setState({contract})\n\n    //          // call the total supply of our Krypto Birdz \n    //          // grab the total supply on the front end and log the results\n    //          // go to web3 doc and read up on methods and call \n    //          const totalSupply = await contract.methods.totalSupply().call()\n    //         this.setState({totalSupply})\n    //         // set up an array to keep track of tokens \n    //         // load KryptoBirdz\n    //         for(let i = 1; i <= totalSupply; i++) {\n    //             const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\n    //             // how should we handle the state on the front end? \n    //             this.setState({\n    //                 kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n    //             })\n    //         }\n    //      } else {\n    //          window.alert('Smart contract not deployed')\n    //      }\n    // }\n\n    // // with minting we are sending information and we need to specify the account\n\n    // mint = (kryptoBird) => {\n    //     this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\n    //     .once('receipt', (receipt)=> {\n    //         this.setState({\n    //             kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\n    //         })\n    //     })  \n    // }\n\n    // constructor(props) {\n    //      super(props);\n    //      this.state = {\n    //          account: '',\n    //          contract:null,\n    //          totalSupply:0,\n    //          kryptoBirdz:[]\n    //      }\n    // }\n\n    //         // BUILDING THE MINTING FORM\n    //         // 1. Create a text input with a place holder \n    //         //'add file location'\n    //         // 2. Create another input button with the type submit\n\n    // render() {\n    //     return (\n    //         <div className='container-filled'>\n    //             {console.log(this.state.kryptoBirdz)}\n    //             <nav className='navbar navbar-dark fixed-top \n    //             bg-dark flex-md-nowrap p-0 shadow'>\n    //             <div className='navbar-brand col-sm-3 col-md-3 \n    //             mr-0' style={{color:'white'}}>\n    //                   Krypto Birdz NFTs (Non Fungible Tokens)\n    //             </div>\n    //             <ul className='navbar-nav px-3'>\n    //             <li className='nav-item text-nowrap\n    //             d-none d-sm-none d-sm-block\n    //             '>\n    //             <small className='text-white'>\n    //                 {this.state.account}\n    //             </small>\n    //             </li>\n    //             </ul>\n    //             </nav>\n\n    //             <div className='container-fluid mt-1'>\n    //                 <div className='row'>\n    //                     <main role='main' \n    //                     className='col-lg-12 d-flex text-center'>\n    //                         <div className='content mr-auto ml-auto'\n    //                         style={{opacity:'0.8'}}>\n    //                             <h1 style={{color:'black'}}>\n    //                                 KryptoBirdz - NFT Marketplace</h1>\n    //                         <form onSubmit={(event)=>{\n    //                             event.preventDefault()\n    //                             const kryptoBird = this.kryptoBird.value\n    //                             this.mint(kryptoBird)\n    //                         }}>\n    //                             <input\n    //                             type='text'\n    //                             placeholder='Add a file location'\n    //                             className='form-control mb-1'\n    //                             ref={(input)=>this.kryptoBird = input}\n    //                             />\n    //                             <input style={{margin:'6px'}}\n    //                             type='submit'\n    //                             className='btn btn-primary btn-black'\n    //                             value='MINT'\n    //                             />\n    //                             </form>\n    //                         </div>\n    //                     </main>\n    //                 </div>\n    //                     <hr></hr>\n    //                     <div className='row textCenter'>\n    //                         {this.state.kryptoBirdz.map((kryptoBird, key)=>{\n    //                             return(\n    //                                 <div >\n    //                                     <div>\n    //                                         <MDBCard className='token img' style={{maxWidth:'22rem'}}>\n    //                                         <MDBCardImage src={kryptoBird}  position='top' height='250rem' style={{marginRight:'4px'}} />\n    //                                         <MDBCardBody>\n    //                                         <MDBCardTitle> KryptoBirdz </MDBCardTitle> \n    //                                         <MDBCardText> The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain. </MDBCardText>\n    //                                         <MDBBtn href={kryptoBird}>Download</MDBBtn>\n    //                                         </MDBCardBody>\n    //                                         </MDBCard>\n    //                                          </div>\n    //                                 </div>\n    //                             )\n    //                         })} \n    //                     </div>\n    //             </div>\n    //         </div>\n    //     )\n    // }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}